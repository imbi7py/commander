import socketserver, logging, threading,math

class FlyDataServer():
    _instance = None

    @staticmethod
    def get_instance():
        assert FlyDataServer._instance is not None
        return FlyDataServer._instance

    def __init__(self, ):
        #self.rc = rc
        FlyDataServer._instance = self
        #ip, port = rc.cfg['fly_data_server_ip'], int(rc.cfg['fly_data_server_port'])
        ip, port='127.0.0.1',7062

        self._server = socketserver.ThreadingUDPServer((ip, port), FlyDataServer.Handler_Class)
        self._server.serve_forever()
        #self._server_thread = threading.Thread(target=self._server.serve_forever, daemon=True)
        #self._server_thread.start()
        print('ok')

    class Handler_Class(socketserver.BaseRequestHandler):
        def handle(self):
            data = self.request[0].strip()
            print(data)
            print(str(data, encoding = "utf-8"))
            data=str(data, encoding = "utf-8")
            text=[]
            for i in range(int(len(data)/2)):
                text.append(data[2*i]+data[2*i+1])
                text[i]=bin(int(text[i], 16))[2:]
                text[i]=(8-len(text[i]))*'0'+text[i]
            text_len = len(text)
            print(text)
            now=0
            while (text[now] != '11101011' or text[now + 1] != '10010000'):
                now = now + 1
                if (now + 21 >= text_len):
                    break
            fly_num = text[now+3]
            fly_num = '0'* 3 * 4 + fly_num
            print(fly_num)
            fly_num=int(fly_num,2)
            lon = text[now + 4] + text[now + 5]+text[now + 6] + text[now + 7]
            lat = text[now + 8] + text[now + 9]+text[now + 10] + text[now + 11]
            height = text[now + 12]+text[now + 13]
            height = height[0] + '0' * 8 + height[1:]
            lon1 = float(int(lon[1:], 2)) / 1000000
            lat1 = float(int(lat[1:], 2)) / 1000000
            if(lon[0]=='1'):
                lon1=-lon1
            if (lat[0] == '1'):
                lat1 = -lat1
            height1 = float(int(height[1:], 2))
            if (height[0] == '1'):
                height1 = -height1
            print([fly_num, lon1, lat1, height1])
            return [fly_num, lon1, lat1, height1]

a=FlyDataServer()
#print(a.Handler_Class.get_fly_location())